{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useState, useEffect } from 'react';\n\nconst useFetch = url => {\n  _s();\n\n  const [, setData] = useState(null);\n  const [isPending, setIsPending] = useState(true);\n  const [error, setError] = useState(null);\n  useEffect(() => {\n    const abortCont = new AbortController();\n    setTimeout(() => {\n      fetch(url, {\n        signal: abortCont.signal\n      }).then(res => {\n        if (!res.ok) {\n          // error coming back from server\n          throw Error('could not fetch the data for that resource');\n        }\n\n        return res.json();\n      }).then(data => {\n        setIsPending(false);\n        setData(data);\n        setError(null);\n      }).catch(err => {\n        if (err.name === 'AbortError') {\n          console.log('fetch aborted');\n        } else {\n          // auto catches network / connection error\n          setIsPending(false);\n          setError(err.message);\n        }\n      });\n    }, 1000); // abort the fetch\n\n    return () => abortCont.abort();\n  }, [url]);\n  return {\n    data,\n    isPending,\n    error\n  };\n};\n\n_s(useFetch, \"sC1Zp3Mr5yp9c0knvMcnK3BdAgg=\");\n\nexport default useFetch;","map":{"version":3,"names":["useState","useEffect","useFetch","url","setData","isPending","setIsPending","error","setError","abortCont","AbortController","setTimeout","fetch","signal","then","res","ok","Error","json","data","catch","err","name","console","log","message","abort"],"sources":["C:/Users/AMHF/Desktop/project-for-job/project/main/src/components/useFetch.jsx"],"sourcesContent":["import { useState, useEffect } from 'react';\n\nconst useFetch = (url) => {\n  const [, setData] = useState(null);\n  const [isPending, setIsPending] = useState(true);\n  const [error, setError] = useState(null);\n\n  useEffect(() => {\n    const abortCont = new AbortController();\n\n    setTimeout(() => {\n      fetch(url, { signal: abortCont.signal })\n        .then((res) => {\n          if (!res.ok) { // error coming back from server\n            throw Error('could not fetch the data for that resource');\n          }\n          return res.json();\n        })\n        .then((data) => {\n          setIsPending(false);\n          setData(data);\n          setError(null);\n        })\n        .catch((err) => {\n          if (err.name === 'AbortError') {\n            console.log('fetch aborted');\n          } else {\n          // auto catches network / connection error\n            setIsPending(false);\n            setError(err.message);\n          }\n        });\n    }, 1000);\n\n    // abort the fetch\n    return () => abortCont.abort();\n  }, [url]);\n\n  return { data, isPending, error };\n};\n\nexport default useFetch;\n"],"mappings":";;AAAA,SAASA,QAAT,EAAmBC,SAAnB,QAAoC,OAApC;;AAEA,MAAMC,QAAQ,GAAIC,GAAD,IAAS;EAAA;;EACxB,MAAM,GAAGC,OAAH,IAAcJ,QAAQ,CAAC,IAAD,CAA5B;EACA,MAAM,CAACK,SAAD,EAAYC,YAAZ,IAA4BN,QAAQ,CAAC,IAAD,CAA1C;EACA,MAAM,CAACO,KAAD,EAAQC,QAAR,IAAoBR,QAAQ,CAAC,IAAD,CAAlC;EAEAC,SAAS,CAAC,MAAM;IACd,MAAMQ,SAAS,GAAG,IAAIC,eAAJ,EAAlB;IAEAC,UAAU,CAAC,MAAM;MACfC,KAAK,CAACT,GAAD,EAAM;QAAEU,MAAM,EAAEJ,SAAS,CAACI;MAApB,CAAN,CAAL,CACGC,IADH,CACSC,GAAD,IAAS;QACb,IAAI,CAACA,GAAG,CAACC,EAAT,EAAa;UAAE;UACb,MAAMC,KAAK,CAAC,4CAAD,CAAX;QACD;;QACD,OAAOF,GAAG,CAACG,IAAJ,EAAP;MACD,CANH,EAOGJ,IAPH,CAOSK,IAAD,IAAU;QACdb,YAAY,CAAC,KAAD,CAAZ;QACAF,OAAO,CAACe,IAAD,CAAP;QACAX,QAAQ,CAAC,IAAD,CAAR;MACD,CAXH,EAYGY,KAZH,CAYUC,GAAD,IAAS;QACd,IAAIA,GAAG,CAACC,IAAJ,KAAa,YAAjB,EAA+B;UAC7BC,OAAO,CAACC,GAAR,CAAY,eAAZ;QACD,CAFD,MAEO;UACP;UACElB,YAAY,CAAC,KAAD,CAAZ;UACAE,QAAQ,CAACa,GAAG,CAACI,OAAL,CAAR;QACD;MACF,CApBH;IAqBD,CAtBS,EAsBP,IAtBO,CAAV,CAHc,CA2Bd;;IACA,OAAO,MAAMhB,SAAS,CAACiB,KAAV,EAAb;EACD,CA7BQ,EA6BN,CAACvB,GAAD,CA7BM,CAAT;EA+BA,OAAO;IAAEgB,IAAF;IAAQd,SAAR;IAAmBE;EAAnB,CAAP;AACD,CArCD;;GAAML,Q;;AAuCN,eAAeA,QAAf"},"metadata":{},"sourceType":"module"}